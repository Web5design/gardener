{
  "name": "naught",
  "version": "0.4.1",
  "description": "zero downtime deployment for your node.js server",
  "keywords": [
    "zero",
    "downtime",
    "uptime",
    "deploy",
    "deployment",
    "unicorn",
    "forever",
    "cluster",
    "daemon",
    "daemonize"
  ],
  "scripts": {
    "dev": "npm install && coke watch",
    "build": "coke build",
    "test": "node test/test.js"
  },
  "bin": {
    "naught": "./lib/main.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/indabamusic/naught.git"
  },
  "author": {
    "name": "Andrew Kelley"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.8.2 <0.10.0"
  },
  "devDependencies": {
    "coco": "~0.8.1",
    "ncp": "~0.2.6",
    "rimraf": "~2.0.2"
  },
  "dependencies": {
    "mkdirp": "~0.3.4",
    "async": "git://github.com/superjoe30/async.git#515c7dfe26135a1961ae9d71c5c"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/indabamusic/naught.png)](http://travis-ci.org/indabamusic/naught)\n\nFeatures:\n---------\n\n * Zero downtime code deployment\n * Ability to change environment variables of workers with zero downtime\n * Resuscitation - when a worker dies it is restarted\n * Redirect worker stdout and stderr to rotating gzipped log files\n * Runs as daemon, providing ability to start and stop\n\nUsage:\n------\n\nTo use naught, your node.js server has 2 requirements.\n\n1. Once the server is fully booted and is readily accepting connections,\n\n   ```js\n   process.send('online');\n   ```\n\n   Usually this is done in the `listening` event for a node server, for\n   example:\n\n   ```js\n   server = http.createServer(...);\n   server.listen(80, function () {\n     process.send('online');\n   });\n   ```\n\n2. Listen to the `shutdown` message and shutdown gracefully. This message\n   is emitted after there is already a newer instance of your server\n   online and taking care of business:\n\n   ```js\n   process.on('message', function(message) {\n     if (message === 'shutdown') {\n       performCleanup();\n       process.exit(0);\n     }\n   );\n   ```\n\n   If your server has no long-lived connections, you may skip this step.\n   However, note that most node.js apps do have long lived connections.\n   In fact, by default, the connection: keep-alive header is sent with\n   every request.\n\n   When you receive the `shutdown` message, either close all open\n   connections or call `process.exit()`.\n\nTip:\n----\n\nIf you want to deploy on a restricted port such as 80 or 443 without sudo, try\n[authbind](http://www.debian-administration.org/articles/386).\n\nNote that there are 3 layers of process spawning between the naught CLI\nand your server. So you'll want to use the `--deep` option with authbind.\n\nCLI:\n----\n\n    naught start [options] server.js [script-options]\n\n        Starts server.js as a daemon passing script-options as command\n        line arguments.\n\n        Each worker's stdout and stderr are redirected to a log files\n        specified by the `stdout` and `stderr` parameters. When a log file\n        becomes larger than `max-log-size`, the log file is renamed using the\n        current date and time, and a new log file is opened.\n\n        With naught, you can use `console.log` and friends. Because naught\n        pipes the output into a log file, node.js treats stdout and stderr\n        as asynchronous streams.\n\n        If you don't want a particular log, use `/dev/null` for the path. Naught\n        special cases this filename and disables that log altogether.\n\n        Creates an `ipc-file` which naught uses to communicate with your\n        server once it has started.\n\n        Available options and their defaults:\n\n        --worker-count 1\n        --ipc-file naught.ipc\n        --log naught.log\n        --stdout stdout.log\n        --stderr stderr.log\n        --max-log-size 10485760\n        --cwd .\n        --node-args ''\n\n\n    naught stop [options] [ipc-file]\n\n        Stops the running server which created `ipc-file`.\n        Uses `naught.ipc` by default.\n\n        This sends the 'shutdown' message to all the workers and waits for\n        them to exit gracefully.\n\n        If you specify a timeout, naught will forcefully kill your workers\n        if they do not shut down gracefully within the timeout.\n\n        Available options and their defaults:\n\n            --timeout none\n\n\n    naught status [ipc-file]\n\n        Displays whether a server is running or not.\n        Uses `naught.ipc` by default.\n\n\n    naught deploy [options] [ipc-file]\n\n        Replaces workers with new workers using new code and optionally\n        the environment variables from this command.\n\n        Naught spawns all the new workers and waits for them to all become\n        online before killing a single old worker. This guarantees zero\n        downtime if any of the new workers fail and provides the ability to\n        cleanly abort the deployment if it hangs.\n\n        A hanging deploy happens when a new worker fails to emit the 'online'\n        message, or when an old worker fails to shutdown upon receiving the\n        'shutdown' message. A keyboard interrupt will cause a deploy-abort,\n        cleanly and with zero downtime.\n\n        If `timeout` is specified, naught will automatically abort the deploy\n        if it does not finish within those seconds.\n\n        If `override-env` is true, the environment varibables that are set with\n        this command are used to override the original environment variables\n        used with the `start` command. If any variables are missing, the\n        original values are left intact.\n\n        Uses `naught.ipc` by default.\n\n        Available options and their defaults:\n\n            --override-env true\n            --timeout none\n\n\n    naught deploy-abort [ipc-file]\n\n        Aborts a hanging deploy. A hanging deploy happens when a new worker\n        fails to emit the 'online' message, or when an old worker fails\n        to shutdown upon receiving the 'shutdown' message.\n\n        When deploying, a keyboard interrupt will cause a deploy-abort,\n        so the times you actually have to run this command will be few and\n        far between.\n\n        Uses `naught.ipc` by default.\n\n\n    naught help [cmd]\n\n        Displays help for cmd.\n\nInstallation:\n-------------\n\n    $ sudo npm install -g naught\n\nDeveloping:\n-----------\n\n    $ npm run dev\n\nLicense:\n--------\n\n    MIT (see LICENSE)\n",
  "_id": "naught@0.4.1",
  "dist": {
    "shasum": "86559fc13822530fb0f42283266ba680a04d474d"
  },
  "_from": "naught"
}
